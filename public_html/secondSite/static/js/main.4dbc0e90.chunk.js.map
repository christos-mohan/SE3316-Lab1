{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Board","state","boardState","Array","fill","playerTurn","winner","columnNum","boardVer","this","map","array","slice","indexOf","newColumn","reverse","setState","makeMove","c","r","checkLine","checkWinner","victoryMessageStyle","columns","length","x","i","Column","squares","handleClick","className","Component","Square","props","value","onClick","j","App","a","b","d","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAKMA,E,kDAEJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAEXC,WAAY,IAAIC,MAAM,GAAGC,KAAK,IAAID,MAAM,GAAGC,KAAK,OAChDC,WAAY,MACZC,OAAQ,IANE,E,4CAUd,SAASC,GAGP,IAAMC,EAAWC,KAAKR,MAAMC,WAAWQ,KAAI,SAASC,GAClD,OAAOA,EAAMC,WAGf,IAA2C,IAAvCJ,EAASD,GAAWM,QAAQ,MAAc,CAE5C,IAAIC,EAAYN,EAASD,GAAWQ,UACpCD,EAAUA,EAAUD,QAAQ,OAASJ,KAAKR,MAAMI,WAChDS,EAAUC,UAGVN,KAAKO,SAAS,CACZX,WAAuC,QAA1BI,KAAKR,MAAMI,WAAwB,SAAW,MAC3DH,WAAYM,O,yBAMlB,SAAYD,GAEe,KAAtBE,KAAKR,MAAMK,QACZG,KAAKQ,SAASV,K,gCAIlB,WAEE,IAAID,EAoER,SAAqBJ,GAEjB,IAAK,IAAIgB,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIC,EAAUlB,EAAWgB,GAAGC,GAAIjB,EAAWgB,GAAGC,EAAE,GAAIjB,EAAWgB,GAAGC,EAAE,GAAIjB,EAAWgB,GAAGC,EAAE,IACpF,OAAOjB,EAAWgB,GAAGC,GAAK,kBAGtC,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIE,EAAUlB,EAAWgB,GAAGC,GAAIjB,EAAWgB,EAAE,GAAGC,GAAIjB,EAAWgB,EAAE,GAAGC,GAAIjB,EAAWgB,EAAE,GAAGC,IACpF,OAAOjB,EAAWgB,GAAGC,GAAK,kBAGvC,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIE,EAAUlB,EAAWgB,GAAGC,GAAIjB,EAAWgB,EAAE,GAAGC,EAAE,GAAIjB,EAAWgB,EAAE,GAAGC,EAAE,GAAIjB,EAAWgB,EAAE,GAAGC,EAAE,IAC1F,OAAOjB,EAAWgB,GAAGC,GAAK,kBAGvC,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIE,EAAUlB,EAAWgB,GAAGC,GAAIjB,EAAWgB,EAAE,GAAGC,EAAE,GAAIjB,EAAWgB,EAAE,GAAGC,EAAE,GAAIjB,EAAWgB,EAAE,GAAGC,EAAE,IAC1F,OAAOjB,EAAWgB,GAAGC,GAAK,kBAEvC,MAAO,GA7FME,CAAYZ,KAAKR,MAAMC,YACjCO,KAAKR,MAAMK,SAAWA,GACvBG,KAAKO,SAAS,CAACV,OAAQA,M,oBAI3B,WAAS,IAEHgB,EAFE,OAKJA,EADuB,KAAtBb,KAAKR,MAAMK,OACU,wBAIA,iBAExB,IAAIiB,EAAU,YAAIpB,MAAMM,KAAKR,MAAMC,WAAWsB,SAASd,KAAI,SAACe,EAAGC,GAAJ,OACzD,cAACC,EAAD,CAEIC,QAAS,EAAK3B,MAAMC,WAAWwB,GAC/BG,YAAa,kBAAM,EAAKA,YAAYH,KAF/BA,MAOX,OACE,gCACE,qBAAKI,UAAU,QAAf,SACGP,IAEH,qBAAKO,UAAWR,EAAhB,SAAsCb,KAAKR,MAAMK,gB,GA1ErCyB,aAgFpB,SAASC,EAAOC,GACd,OAAO,qBAAKH,UAAU,SAAf,SAAwB,qBAAKA,UAAWG,EAAMC,UAGvD,SAASP,EAAOM,GACZ,OAAO,qBAAKH,UAAU,SAASK,QAAS,kBAAMF,EAAMJ,eAA7C,SACJ,YAAI1B,MAAM8B,EAAML,QAAQJ,SAASd,KAAI,SAACe,EAAGW,GAAJ,OACpC,cAACJ,EAAD,CAAgBE,MAAOD,EAAML,QAAQQ,IAAxBA,Q,IAIfC,E,4JACJ,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,gDAEF,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,a,GARQC,aAelB,SAASX,EAAUkB,EAAEC,EAAErB,EAAEsB,GAErB,OAAe,OAANF,GAAgBA,IAAMC,GAAOD,IAAMpB,GAAOoB,IAAME,EA+B9CH,QCpIAI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4dbc0e90.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n\nclass Board extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      // Creates our 7x6 board\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      playerTurn: 'Red', // Red is the first player\n      winner: '' // Initilized as nothing since there is no winner \n    }\n  }\n\n  makeMove(columnNum){\n    \n    // Create a new instance of the board to manipulate for this turn\n    const boardVer = this.state.boardState.map(function(array) {\n      return array.slice();\n    });\n\n    if( boardVer[columnNum].indexOf(null) !== -1 ){\n\n      let newColumn = boardVer[columnNum].reverse()\n      newColumn[newColumn.indexOf(null)] = this.state.playerTurn\n      newColumn.reverse()\n      \n      // Changes the player turn after the move and changes the boardState \n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardVer\n      })\n\n    }\n  }\n\n  handleClick(columnNum) {\n    // Only allows moves to be made if there is no winner yet\n    if(this.state.winner === ''){\n      this.makeMove(columnNum)\n    }\n  }\n  \n  componentDidUpdate(){\n    // checks for a Winner \n    let winner = checkWinner(this.state.boardState)\n    if(this.state.winner !== winner){\n      this.setState({winner: winner})\n    }\n  }\n\n  render(){\n\n    let victoryMessageStyle\n\n    if(this.state.winner !== \"\") {\n      victoryMessageStyle = \"victoryMessage appear\"\n    }\n    \n    else {\n      victoryMessageStyle = \"victoryMessage\"\n    }\n    let columns = [...Array(this.state.boardState.length)].map((x, i) => \n      <Column \n          key={i}\n          squares={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Column>\n    )\n    \n    // \n    return (\n      <div>\n        <div className=\"Board\">\n          {columns}\n        </div>\n        <div className={victoryMessageStyle}>{this.state.winner}</div>\n      </div>\n    )\n  }\n}\n\nfunction Square(props){\n  return <div className=\"Square\"><div className={props.value}></div></div>\n}\n\nfunction Column(props){\n    return <div className=\"Column\" onClick={() => props.handleClick()}>\n      {[...Array(props.squares.length)].map((x, j) => \n        <Square key={j} value={props.squares[j]}></Square>)}\n      </div>\n }\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Connect Four</h2>\n        </div>\n        <div className=\"ConnectFour\">\n          <Board></Board>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction checkLine(a,b,c,d) {\n    // Checks that all the squares sent from checkWinner are the same \n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\nfunction checkWinner(boardState) {\n    // Checking for vertical wins \n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 4; r++)\n            if (checkLine(boardState[c][r], boardState[c][r+1], boardState[c][r+2], boardState[c][r+3]))\n                return boardState[c][r] + ' is the Winner!'\n    \n    // Checking for Horizontal Wins\n    for (let r = 0; r < 6; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(boardState[c][r], boardState[c+1][r], boardState[c+2][r], boardState[c+3][r]))\n                 return boardState[c][r] + ' is the Winner!'\n\n    // Checking for Diagonal Wins (bottom L to top R)\n    for (let r = 0; r < 3; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(boardState[c][r], boardState[c+1][r+1], boardState[c+2][r+2], boardState[c+3][r+3]))\n                 return boardState[c][r] + ' is the Winner!'\n    \n    // Checking for Diagonal Wins (top L to bottom L)\n    for (let r = 0; r < 4; r++)\n         for (let c = 3; c < 6; c++)\n             if (checkLine(boardState[c][r], boardState[c-1][r+1], boardState[c-2][r+2], boardState[c-3][r+3]))\n                 return boardState[c][r] + ' is the Winner!'\n\n    return \"\";\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}